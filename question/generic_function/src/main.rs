fn compare<T: PartialOrd>(a: T, b: T) -> bool {
    a < b
}


fn main() {
    let result = compare(1, 2); // 숫자 비교
    println!("1 < 2: {}", result); // 출력: 1 < 2: true

    let result = compare("a", "b"); // 문자열 비교
    println!("\"a\" < \"b\": {}", result); // 출력: "a" < "b": true
}

/// 제네릭 함수의 장점
/// 1. 코드 재사용성: 한 번의 함수 정의로 다양한 타입에 적용할 수 있다.
/// 2. 형식 안정성: 컴파일 타입에 타입 오류를 잡아낼 수 있다.
/// 3. 유연성: 필요에 따라 제약을 추가하여 타입 파라미터의 특성을 정의할 수 있다.
/// 
/// 주의사항
/// 1. 제네릭 함수는 컴파일 타임에 특정 타입으로 구체화되므로, 런타임 성능에는 영향을 미치지 않는다.
/// 2. 하지만 너무 많은 제네릭 사용은 컴파일 시간을 늘릴 수 있다.